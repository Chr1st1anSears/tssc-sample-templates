apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: dotnet-basic
  title: Basic .NET
  description: Sample Code for Basic .NET
  tags:
    - net
    - ssc
    - sbom
    - acs
spec:
  owner: user:guest
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Information
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
          ui:field: EntityNamePicker
          maxLength: 63
    - title: Application Repository Information
      required:
        - repoUrl
        - branch
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              # - gitlab.com can be provided as an option
        branch:
          title: Repository Default Branch
          type: string
          default: main
    - title: Deployment information
      required:
        - imageRegistry
        - imageOrg
        - imageName
        - namespace
      properties:
        imageRegistry:
          title: Select a image registry
          type: string
          default: quay.io
          enum:
            - quay.io
            - image-registry.openshift-image-registry.svc:5000
            - docker.io
          enumNames:
            - Quay
            - Internal OpenShift Registry
            - Docker
        imageOrg:
          title: Image Organization
          type: string
          description: The organization, user or project that this repo will belong to
        imageName:
          title: Image Name
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
        namespace:
          title: Deployment Namespace
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the workspace.
    # Renders all the template variables into the files and directory names and content, and places the result in the workspace.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          repoUrl: ${{ parameters.repoUrl }}
          image: ${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}
          namespace: ${{ parameters.namespace }}
    - id: fetch-skeleton
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ../../skeleton
        values:
          name: ${{ parameters.name }}
          description: Secure Supply Chain Example for Sample Code for Basic .NET
          dockerfile: docker/Dockerfile
          buildContext: .
          tags: ["net", "ssc", "sbom", "acs"]
    # This action creates a new GitHub repository and publishes the files in the workspace directory to the repository.
    - id: publish
      name: Publish Repository to Github
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
