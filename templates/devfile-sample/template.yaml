apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: nodejs
  title:  Node.js Runtime
  description: Stack with Node.js 18 
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Enter the name for the application
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component 
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Choose repo for github.com 
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              - https://github.com
    - title: Deployment information 
      required:
        - image
        - namespace 
      properties:
        image:
          title: Deployment Image 
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
        namespace:
          title: Deployment NS 
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content 
        values:
          name: ${{ parameters.name }}
          repoUrl: ${{ parameters.repoUrl }}
          repoUrl2: ${{ parameters.repoUrl2 }}
          image: ${{ parameters.image }}
          namespace: ${{ parameters.namespace }}  
          
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
