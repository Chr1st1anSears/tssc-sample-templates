apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: nodejs
  title: Node.js Runtime
  description: Stack with Node.js 18
  tags:
    - nodejs
    - express
    - ubi8
    - ssc
    - sbom
    - acs
spec:
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Information
      required:
        - name
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
          ui:field: EntityNamePicker
          maxLength: 63
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: user:guest
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
    - title: Application Repository Information
      required:
        - repoUrl
        - branch
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
              - gitlab.com
        branch:
          title: Repository Default Branch
          type: string
          default: main
    - title: Deployment information
      required:
        - imageRegistry
        - imageOrg
        - imageName
        - namespace
      properties:
        imageRegistry:
          title: Select a image registry
          type: string
          default: quay.io
          enum:
            - quay.io
            - image-registry.openshift-image-registry.svc:5000
            - docker.io
          enumNames:
            - Quay
            - Internal OpenShift Registry
            - Docker
        imageOrg:
          title: Image Organization
          type: string
          description: The organization, user or project that this repo will belong to
        imageName:
          title: Image Name
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
        namespace:
          title: Deployment Namespace
          type: string
          ui:autofocus: true
          ui:options:
            rows: 5
  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the workspace.
    # Get the sample source code
    - id: fetch-base
      name: Fetch Base
      action: fetch:plain
      input:
        url: ./content
    # Renders all the template variables into the files and directory names and content, and places the result in the workspace.
    - id: fetch-skeleton
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ../../skeleton/source-repo
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          description: Secure Supply Chain Example for Stack with Node.js 18
          dockerfile: Dockerfile
          buildContext: .
          image: '${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          tags: '["nodejs", "express", "ubi8", "ssc", "sbom", "acs"]'
          owner: ${{ parameters.owner }}
    # This action creates a new GitHub repository and publishes the files in the workspace directory to the repository.
    - id: publish-github
      name: Publish Repository to Github
      action: publish:github
      if: ${{ (parameters.repoUrl | parseRepoUrl).host === 'github.com' }}
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
    # This action creates a new GitLab repository and publishes the files in the workspace directory to the repository.
    - id: publish-gitlab
      name: Publish Repository to GitLab
      action: publish:gitlab
      if: ${{ (parameters.repoUrl | parseRepoUrl).host === 'gitlab.com' }}
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: false
        repoVisibility: "public"
    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-github'].output.repoContentsUrl if steps['publish-github'].output else steps['publish-gitlab'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
    - id: fetch-gitops-skeleton
      name: Fetch Gitops Skeleton
      action: fetch:template
      input:
        url: ../../skeleton/gitops-template
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          repoURL: ${{ parameters.repoUrl }}
          argoComponent: './components/${{ parameters.name }}'
          description: Secure Supply Chain Example for Stack with Node.js 18
          dockerfile: Dockerfile
          buildContext: .
          image: '${{ parameters.imageRegistry }}/${{ parameters.imageOrg }}/${{ parameters.imageName }}'
          tags: '["nodejs", "express", "ubi8", "ssc", "sbom", "acs"]'
          owner: ${{ parameters.owner }}
  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Source Repository
        url: ${{ steps['publish-github'].output.remoteUrl if steps['publish-github'].output else steps['publish-gitlab'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
